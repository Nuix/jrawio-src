/*******************************************************************************
 *
 * jrawio - a Java(TM) ImageIO API Spi Provider for RAW files
 * ----------------------------------------------------------
 *
 * Copyright (C) 2003-2006 by Fabrizio Giudici (Fabrizio.Giudici@tidalwave.it)
 * Project home page: http://jrawio.dev.java.net
 * 
 *******************************************************************************
 *
 * MIT License notice
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy 
 * of this software and associated documentation files (the "Software"), to deal 
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
 *******************************************************************************
 *
 * $Id: NEFImageReader.java,v 1.5 2006/02/15 13:53:50 fabriziogiudici Exp $
 *
 ******************************************************************************/
package it.tidalwave.imageio.nef;

import java.awt.image.BufferedImage;
import java.awt.image.WritableRaster;
import java.io.IOException;
import java.util.logging.Logger;
import javax.imageio.spi.ImageReaderSpi;
import it.tidalwave.imageio.io.RAWImageInputStream;
import it.tidalwave.imageio.tiff.IFD;
import it.tidalwave.imageio.tiff.TIFFImageReaderSupport;
import it.tidalwave.imageio.tiff.TIFFMetadataSupport;

/*******************************************************************************
 *
 * @author  Fabrizio Giudici
 * @version CVS $Id: NEFImageReader.java,v 1.5 2006/02/15 13:53:50 fabriziogiudici Exp $
 *
 ******************************************************************************/
public class NEFImageReader extends TIFFImageReaderSupport
  {
    private final static Logger logger = Logger.getLogger("it.tidalwave.imageio.nef.NEFImageReader");

    private boolean isNDF = false;

    /*******************************************************************************
     *
     ******************************************************************************/
    protected NEFImageReader (ImageReaderSpi originatingProvider, Object extension)
      {
        super(originatingProvider, NikonMakerNote3.class, NEFMetadata.class);
        headerProcessor = new NEFHeaderProcessor();
      }

    /*******************************************************************************
     *
     * @inheritDoc
     * 
     * Loads a NEF image. This method is able to take care of:
     * 
     * <ol>
     * <li>regular RAW files;</li>
     * <li>"dust sample" files (.NDF);</li>
     * <li>JPEG images embedded in NEF (can be generated by Nikon Capture Editor)</li>
     * </ol>
     * 
     * RAW and dust samples are delegated to loadRAWImage(), while JPEGs are 
     * delegated to loadEmbeddedImage(). 
     * 
     *
     * @param  imageIndex   the imageIndex of the image to load
     * @return              the image
     * @throws IOException  if an I/O error occurs
     *
     ******************************************************************************/
    protected BufferedImage loadImage (int imageIndex) throws IOException
      {
        logger.fine("loadImage(iis: " + iis + ", imageIndex: " + imageIndex + ")");
        checkImageIndex(imageIndex);
        ensureMetadataIsLoaded(imageIndex);

        IFD rasterIFD = ((TIFFMetadataSupport)metadata).getRasterIFD();
        BufferedImage image;
        IFD.Compression compression = null;

        if ((rasterIFD != null) && rasterIFD.isCompressionAvailable()) // NDF doesn't have it
          {
            compression = rasterIFD.getCompression();
          }

        if (compression == IFD.Compression.OJPEG) // TODO: check if you can move this to RAWImageReaderSupport
          {
            int offset = rasterIFD.getJPEGInterchangeFormat();
            int length = rasterIFD.getJPEGInterchangeFormatLength();
            image = loadEmbeddedImage(iis, offset + headerProcessor.getOffset(), length);
          }

        else
          {
            image = loadRAWImage();
          }

        logger.fine(">>>> loadImage() completed ok, returning " + image);

        return image;
      }

    /*******************************************************************************
     *
     * @inheritDoc
     * 
     ******************************************************************************/
    protected WritableRaster loadRAWRaster() throws IOException
      {
        logger.fine("loadRAWRaster(iis: " + iis + ")");
        IFD primaryIFD = ((IFD)primaryDirectory);
        IFD rasterIFD = ((TIFFMetadataSupport)metadata).getRasterIFD();
        IFD exifIFD = ((TIFFMetadataSupport)metadata).getExifIFD();
        IFD thumbnailIFD = ((TIFFMetadataSupport)metadata).getThumbnailHelper()[0].ifd;
        NikonMakerNote3 nikonMakerNote = (NikonMakerNote3)makerNote;

        long time = System.currentTimeMillis();
        int offset = (!isNDF) ? rasterIFD.getStripOffsets() : thumbnailIFD.getJPEGInterchangeFormat()
            + thumbnailIFD.getJPEGInterchangeFormatLength(); // FIXME: just a guess
        iis.seek(offset); 
        
        int bitsPerSample = (!isNDF) ? rasterIFD.getBitsPerSample()[0] : exifIFD.getCompressedBitsPerPixel().intValue();
        String model = primaryIFD.getModel();
        NEFRasterReader rasterReader = NEFRasterReader.getInstance(model, isNDF);
        int width = (!isNDF) ? rasterIFD.getImageWidth() : exifIFD.getPixelXDimension();
        int height = (!isNDF) ? rasterIFD.getImageLength() : exifIFD.getPixelYDimension();
        initializeRasterReader(width, height, bitsPerSample, rasterReader);

        if (nikonMakerNote.isCompressionDataAvailable())
          {
            rasterReader.setLinearizationTable(nikonMakerNote.getLinearizationTable());
            rasterReader.setVPredictor(nikonMakerNote.getVPredictor());
          }

        logger.finest(">>>> using rasterReader: " + rasterReader);
        WritableRaster raster = rasterReader.loadRaster(iis, this);
        logger.finer(">>>> loadRAWRaster() completed ok in " + (System.currentTimeMillis() - time) + " msec.");

        return raster;
      }

    /*******************************************************************************
     * 
     * @inheritDoc
     * 
     *******************************************************************************/
    protected void processMetadata() throws IOException
      {
        iis.setBaseOffset(headerProcessor.getOffset());
        isNDF = iis.getBaseOffset() != 0;//FIXME: do it better
        super.processMetadata();
      }
  }
